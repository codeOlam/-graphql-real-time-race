type StarredEvent @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String
  Event: Event @connection
}

type Event
  @model
  @auth(rules: [{ allow: private, operations: [read, update] }]) {
  id: ID!
  title: String!
  date: AWSDateTime!
  description: String!
  heart: Int
  thumbsup: Int
  happy: Int
}

type Race {
  PK: String
  SK: String
  raceName: String
  round: Int
  season: String
  date: String
  time: String
  url: String
  Circuit: AWSJSON
}

type Result {
  Constructor: Constructor
  Driver: Driver
  FastestLap: Lap
  driverId: String
  grid: String
  laps: String
  number: String
  PK: String
  points: String
  position: String
  positionText: String
  round: Int
  SK: String
  status: String
}

type Constructor {
  constructorId: String
  name: String
  nationality: String
  url: String
}

type Driver {
  code: String
  dateOfBirth: String
  driverId: String
  familyName: String
  givenName: String
  nationality: String
  permanentNumber: String
  url: String
}

type Lap {
  AverageSpeed: Speed
  lap: String
  rank: String
  Time: LapTime
}

type Speed {
  speed: String
  units: String
}

type LapTime {
  time: String
}

type Query {
  getRaces: [Race]
  getResults(driverId: String!): [Result]
  getResults2(driverId: String!): [Result]
}

type LocationEvent
  @model
  @auth(
    rules: [
      { allow: private, provider: iam, operations: [read, create] }
      { allow: private }
    ]
  ) {
  id: ID!
  type: String
  geofenceId: String
  deviceId: String
  sampleTime: String
  longitude: Float
  latitude: Float
}

type Message
  @model
  @key(
    fields: ["eventId", "createdAt"]
    name: "ByEventId"
    queryField: "messagesByEventId"
  )
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [update] }
    ]
  ) {
  id: ID!
  owner: ID
  content: String!
  event: Event @connection(fields: ["eventId"])
  eventId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  original: S3Object
  thumbnail: S3Object
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
}
